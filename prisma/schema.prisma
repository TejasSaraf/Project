
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                 @id @default(cuid())
  name             String?
  email            String                 @unique
  emailVerified    DateTime?
  image            String?
  password         String? 
  accounts         Account[]
  sessions         Session[]
  Authenticator    Authenticator[]
  jiraIntegrations UserJiraIntegration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model UserJiraIntegration {
  id                       String    @id @default(cuid())
  userId                   String    @map("user_id")
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jiraCloudId              String    @map("jira_cloud_id")
  jiraBaseUrl              String    @map("jira_base_url")
  encryptedAccessToken     String    @map("encrypted_access_token")
  accessTokenExpiresAt     DateTime  @map("access_token_expires_at")
  encryptedRefreshToken    String    @map("encrypted_refresh_token")
  scopes                   String? 
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")

  @@unique([userId, jiraCloudId]) 
  @@map("user_jira_integrations") 
}